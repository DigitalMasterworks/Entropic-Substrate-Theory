#!/usr/bin/env python3
# emit_bsd_ap_table.py
# Read a JSON file containing the BSD a_p values and emit a Lean file
# Myproject/BSD/Data.lean defining `def ap_table : List Int := [...]`
#
# Usage:
#   cd Myproject/Python
#   python3 emit_bsd_ap_table.py

import json
from pathlib import Path
import datetime
import sys

# path to your JSON (as you reported)
JSON_PATH = Path("###/bsd_ap_table.json")
OUT_PATH = Path("../BSD/Data.lean")

def to_int_literal(x):
    # convert a JSON value to a Lean Int literal (e.g. -3 -> -3, "null" -> 0)
    if x is None:
        return "0"
    if isinstance(x, bool):
        # unlikely, but be safe
        return "1" if x else "0"
    try:
        # prefer integer conversion
        xi = int(x)
        return str(xi)
    except Exception:
        # try float -> int if roundable
        try:
            xf = float(x)
            xi = int(xf)
            return str(xi)
        except Exception:
            # fallback: write 0 and warn
            return "0"

def main():
    if not JSON_PATH.exists():
        print(f"ERROR: JSON file not found at {JSON_PATH}", file=sys.stderr)
        sys.exit(2)

    with JSON_PATH.open("r", encoding="utf-8") as f:
        data = json.load(f)

    # Expecting either a list or an object containing a list; try to be flexible
    if isinstance(data, dict):
        # common keys: "ap_table", "ap", "values"
        candidates = ["ap_table", "ap", "values", "a_p", "a_p_table"]
        found = None
        for k in candidates:
            if k in data:
                found = data[k]
                break
        if found is None:
            # fallback: if dict's values are numeric list-like, try to extract list
            for v in data.values():
                if isinstance(v, list):
                    found = v
                    break
        if found is None:
            print("ERROR: JSON file is an object but no obvious list found.", file=sys.stderr)
            sys.exit(3)
        ap_list = found
    elif isinstance(data, list):
        ap_list = data
    else:
        print("ERROR: JSON root is neither list nor dict; unexpected format.", file=sys.stderr)
        sys.exit(4)

    lean_elems = [to_int_literal(x) for x in ap_list]

    header = f"""-/- Auto-generated by Myproject/Python/emit_bsd_ap_table.py
   Source JSON: {JSON_PATH}
   Generated: {datetime.datetime.utcnow().isoformat()} UTC
   DO NOT EDIT BY HAND â€” re-run the emitter to regenerate.
-/
"""

    body = "def ap_table : List Int := [" + ", ".join(lean_elems) + "]\n"

    out_text = header + "\nimport Mathlib.Data.Int.Basic\n\nnamespace Myproject\nnamespace BSD\n\n" + body + "\nend BSD\nend Myproject\n"

    OUT_PATH.parent.mkdir(parents=True, exist_ok=True)
    OUT_PATH.write_text(out_text, encoding="utf-8")
    print(f"Wrote {OUT_PATH} with {len(lean_elems)} entries (source: {JSON_PATH}).")

if __name__ == "__main__":
    main()