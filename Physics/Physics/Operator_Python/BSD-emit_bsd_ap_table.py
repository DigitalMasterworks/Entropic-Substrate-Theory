#!/usr/bin/env python3








import json
from pathlib import Path
import datetime
import sys


JSON_PATH = Path("###/bsd_ap_table.json")
OUT_PATH = Path("../BSD/Data.lean")

def to_int_literal(x):

 if x is None:
 return "0"
 if isinstance(x, bool):

 return "1" if x else "0"
 try:

 xi = int(x)
 return str(xi)
 except Exception:

 try:
 xf = float(x)
 xi = int(xf)
 return str(xi)
 except Exception:

 return "0"

def main():
 if not JSON_PATH.exists():
 print(f"ERROR: JSON file not found at {JSON_PATH}", file=sys.stderr)
 sys.exit(2)

 with JSON_PATH.open("r", encoding="utf-8") as f:
 data = json.load(f)


 if isinstance(data, dict):

 candidates = ["ap_table", "ap", "values", "a_p", "a_p_table"]
 found = None
 for k in candidates:
 if k in data:
 found = data[k]
 break
 if found is None:

 for v in data.values():
 if isinstance(v, list):
 found = v
 break
 if found is None:
 print("ERROR: JSON file is an object but no obvious list found.", file=sys.stderr)
 sys.exit(3)
 ap_list = found
 elif isinstance(data, list):
 ap_list = data
 else:
 print("ERROR: JSON root is neither list nor dict; unexpected format.", file=sys.stderr)
 sys.exit(4)

 lean_elems = [to_int_literal(x) for x in ap_list]

 header = f"""-/- Auto-generated by Myproject/Python/emit_bsd_ap_table.py
 Source JSON: {JSON_PATH}
 Generated: {datetime.datetime.utcnow().isoformat()} UTC
 DO NOT EDIT BY HAND â€” re-run the emitter to regenerate.
-/
"""

 body = "def ap_table: List Int:= [" + ", ".join(lean_elems) + "]\n"

 out_text = header + "\nimport Mathlib.Data.Int.Basic\n\nnamespace Myproject\nnamespace BSD\n\n" + body + "\nend BSD\nend Myproject\n"

 OUT_PATH.parent.mkdir(parents=True, exist_ok=True)
 OUT_PATH.write_text(out_text, encoding="utf-8")
 print(f"Wrote {OUT_PATH} with {len(lean_elems)} entries (source: {JSON_PATH}).")

if __name__ == "__main__":
 main()