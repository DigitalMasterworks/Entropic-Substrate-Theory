import Mathlib.Algebra.Ring.Rat
import Mathlib.Data.Matrix.Basic

open Matrix

namespace Physics
namespace YangMillsReverse

/-- Smallest nonzero eigenvalue reported by the assembler (rationalized). -/
def lambda_min_n : Rat := 2
theorem lambda_min_n_def : lambda_min_n = 2 := by rfl

/-- Exact rational 24×24 Hessian rows (verbatim). -/
def H_wilson_n2_rows : Array (Array Rat) :=
#[
  #[[1/1, 0/1, 0/1, -1/2, 0/1, 0/1, -1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1]],
  #[[0/1, 1/1, 0/1, 0/1, -1/2, 0/1, 0/1, -1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1]],
  #[[0/1, 0/1, 1/1, 0/1, 0/1, -1/2, 0/1, 0/1, -1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2]],
  #[[-1/2, 0/1, 0/1, 1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, -1/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1]],
  #[[0/1, -1/2, 0/1, 0/1, 1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, -1/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1]],
  #[[0/1, 0/1, -1/2, 0/1, 0/1, 1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, -1/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1]],
  #[[-1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 1/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1]],
  #[[0/1, -1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 1/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1]],
  #[[0/1, 0/1, -1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 1/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2]],
  #[[1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 1/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, -1/1, 0/1, 0/1]],
  #[[0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 1/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, -1/1, 0/1]],
  #[[0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 1/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, -1/1]],
  #[[0/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 1/1, 0/1, 0/1, -1/2, 0/1, 0/1, -1/1, 0/1, 0/1, 1/2, 0/1, 0/1]],
  #[[0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 1/1, 0/1, 0/1, -1/2, 0/1, 0/1, -1/1, 0/1, 0/1, 1/2, 0/1]],
  #[[1/2, 0/1, 0/1, -1/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1]],
  #[[0/1, 1/2, 0/1, 0/1, -1/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1]],
  #[[0/1, 0/1, 1/2, 0/1, 0/1, -1/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1]],
  #[[0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, -1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 1/1, 0/1, 0/1, -1/2, 0/1, 0/1]],
  #[[0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, -1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 1/1, 0/1, 0/1, -1/2, 0/1]],
  #[[0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, -1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 1/1, 0/1, 0/1, -1/2]],
  #[[-1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, -1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 1/1, 0/1, 0/1]],
  #[[0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, -1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 1/1, 0/1]],
  #[[0/1, 0/1, -1/2, 0/1, 0/1, 0/1, 0/1, 0/1, 1/2, 0/1, 0/1, -1/1, 0/1, 0/1, 1/2, 0/1, 0/1, 0/1, 0/1, 0/1, -1/2, 0/1, 0/1, 1/1]]
]

@[inline] def H_w_get (i j : Nat) : Rat :=
  if hi : i < H_wilson_n2_rows.size then
    let row := H_wilson_n2_rows[i]
    if hj : j < row.size then
      row[j]
    else 0
  else 0

/-- Final 24×24 matrix built from the verbatim rows above. -/
def H_wilson_n2 : Matrix (Fin 24) (Fin 24) Rat :=
  fun i j => H_w_get i.val j.val

end YangMillsReverse
end Physics
